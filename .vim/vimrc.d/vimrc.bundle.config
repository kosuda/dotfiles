" ---------
"  NERDTree
" ---------
nmap <Leader>n : NERDTreeToggle<CR>
" バッファが無くなった時にnerd treeも閉じる
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" -------------
"  color scheme
" -------------
syntax enable
set background=dark
let g:solarized_termtrans=1
colorscheme solarized
hi Comment ctermfg=darkgray

" -----------------------------
"  neocomplcache or neocomplete
" -----------------------------
function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#max_list = 20
    let g:neocomplete#min_keyword_length = 1
    let g:neocomplete#force_overwrite_completefunc = 1

    inoremap <expr><C-l> neocomplete#complete_common_string()
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"

    if !exists("g:neocomplete#sources#omni#functions")
        let g:neocomplete#sources#omni#functions = {}
    endif

    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif

    let g:neocomplete#sources#omni#input_patterns.go = '[^.[:digit:] *\t]\.\w*'

    let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'javascript' : '~/.vim/bundle/vim-node-dict/dict/node.dict'
      \ }
else
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_force_overwrite_completefunc = 1

    inoremap <expr><C-g> neocomplcache#undo_completion()
    inoremap <expr><C-l> neocomplcache#complete_common_string()
    " Recommended key-mappings
    " <CR>: close popup and save indent
    function! s:my_cr_function()
        return neocomplcache#smart_close_popup() . "\<CR>"
    endfunction

    inoremap <silent><CR><C-r>=<SID>my_cr_function()<CR>
    "<TAB>: completion"
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-Y> neocomplcache#close_popup()
    inoremap <expr><C-e> neocomplcache#cancel_popup()

    " C++ setting
    if !exists("g:neocomplcache_force_omni_patterns")
        let g:neocomplcache_force_omni_patterns = {}
    endif

    " omnifunc が呼び出される場合の世紀表現パターンを設定
    let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
endif

" ------------
"  neosnippet
" ------------
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
let g:neosnippet#snippets_directory = '~/.vim/snippets'

" --------
"  vim-go
" --------
let g:syntastic_go_checkers = ['go', 'golint', 'govet']
let s:hooks = neobundle#get_hooks('vim-go')
function! s:hooks.on_source(bundle)
    let g:go_bin_path = expand('$HOME/.go/bin')
    let g:go_disable_autoinstall = 1
    let g:go_fmt_autosave = 1
    let g:go_fmt_command = 'gofmt'
    let g:go_fmt_fail_silently = 1 " use syntasitic to check errors
    let g:go_play_open_browser = 0
    let g:go_snippet_engine = 'neosnippet'
    let g:neosnippet#snippets_directory .= ',~/.vim/bundle/vim-go/gosnippets/snippets'

    augroup MyGoAutocmd
        autocmd!
        autocmd FileType go nmap <LocalLeader>i <Plug>(go-info)
        autocmd FileType go nmap <LocalLeader>gd <Plug>(go-doc)
        autocmd FileType go nmap <LocalLeader>gv <Plug>(go-doc-vertical)
        autocmd FileType go nmap <LocalLeader>gb <Plug>(go-build)
        autocmd FileType go nmap <LocalLeader>gt <Plug>(go-test)
        autocmd FileType go nmap gd <Plug>(go-def)
        autocmd FileType go nmap <LocalLeader>ds <Plug>(go-def-split)
        autocmd FileType go nmap <LocalLeader>dv <Plug>(go-def-vertical)
        autocmd FileType go nmap <LocalLeader>gl :GoLint<CR>
    augroup END
endfunction
unlet s:hooks

" ----------
"  quickrun
" ----------
nmap <Leader>r <Plug>(quickrun)
let s:hooks = neobundle#get_hooks('vim-quickrun')
function! s:hooks.on_source(bundle)
    let g:quickrun_config = {
        \ '_' : {
        \   'runner' : 'vimproc',
        \   'runner/vimproc/updatetime': 10,
        \   'hook/time/enable' : 1,
        \   'outputter/buffer/close_on_empty': 1,
        \   'outputter/buffer/split' : ':botright 5sp',
        \ },
        \ 'go': {
        \   'command': 'go',
        \   'exec': ['%c run %s'],
        \ }}
endfunction
unlet s:hooks

" -----------
"  powerline
" -----------
let g:Powerline_symbols='fancy'
let g:Powerline_colorscheme='solarized256_dark'

" -----------------------------
"  javascript-libraries-syntax
" -----------------------------
let g:used_javascript_libs = 'angularjs,angularui,jquery'

